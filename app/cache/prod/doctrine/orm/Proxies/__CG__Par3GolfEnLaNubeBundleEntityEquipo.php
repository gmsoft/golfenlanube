<?php

namespace Proxies\__CG__\Par3\GolfEnLaNubeBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Equipo extends \Par3\GolfEnLaNubeBundle\Entity\Equipo implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function tarjetasCompletas()
    {
        $this->__load();
        return parent::tarjetasCompletas();
    }

    public function actualizarScoresTotales()
    {
        $this->__load();
        return parent::actualizarScoresTotales();
    }

    public function getTorneoFechaJugadoresConTarjeta()
    {
        $this->__load();
        return parent::getTorneoFechaJugadoresConTarjeta();
    }

    public function getTorneoFechaJugadoresConTarjetaOk()
    {
        $this->__load();
        return parent::getTorneoFechaJugadoresConTarjetaOk();
    }

    public function getTorneoFechaJugadoresOrderByScoreNetoAsc()
    {
        $this->__load();
        return parent::getTorneoFechaJugadoresOrderByScoreNetoAsc();
    }

    public function getScoresNetos()
    {
        $this->__load();
        return parent::getScoresNetos();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setIdClub($idClub)
    {
        $this->__load();
        return parent::setIdClub($idClub);
    }

    public function getIdClub()
    {
        $this->__load();
        return parent::getIdClub();
    }

    public function setIdTorneoFecha($idTorneoFecha)
    {
        $this->__load();
        return parent::setIdTorneoFecha($idTorneoFecha);
    }

    public function getIdTorneoFecha()
    {
        $this->__load();
        return parent::getIdTorneoFecha();
    }

    public function setNombre($nombre)
    {
        $this->__load();
        return parent::setNombre($nombre);
    }

    public function getNombre()
    {
        $this->__load();
        return parent::getNombre();
    }

    public function addTorneoFechaJugadore(\Par3\GolfEnLaNubeBundle\Entity\TorneoFechaJugador $torneoFechaJugadores)
    {
        $this->__load();
        return parent::addTorneoFechaJugadore($torneoFechaJugadores);
    }

    public function removeTorneoFechaJugadore(\Par3\GolfEnLaNubeBundle\Entity\TorneoFechaJugador $torneoFechaJugadores)
    {
        $this->__load();
        return parent::removeTorneoFechaJugadore($torneoFechaJugadores);
    }

    public function getTorneoFechaJugadores()
    {
        $this->__load();
        return parent::getTorneoFechaJugadores();
    }

    public function getTorneoFechaJugadoresConJugadorInformado()
    {
        $this->__load();
        return parent::getTorneoFechaJugadoresConJugadorInformado();
    }

    public function setClub(\Par3\GolfEnLaNubeBundle\Entity\Club $club = NULL)
    {
        $this->__load();
        return parent::setClub($club);
    }

    public function getClub()
    {
        $this->__load();
        return parent::getClub();
    }

    public function setTorneoFecha(\Par3\GolfEnLaNubeBundle\Entity\TorneoFecha $torneo_fecha = NULL)
    {
        $this->__load();
        return parent::setTorneoFecha($torneo_fecha);
    }

    public function getTorneoFecha()
    {
        $this->__load();
        return parent::getTorneoFecha();
    }

    public function setScoreGross($scoreGross)
    {
        $this->__load();
        return parent::setScoreGross($scoreGross);
    }

    public function getScoreGross()
    {
        $this->__load();
        return parent::getScoreGross();
    }

    public function setScoreNeto($scoreNeto)
    {
        $this->__load();
        return parent::setScoreNeto($scoreNeto);
    }

    public function getScoreNeto()
    {
        $this->__load();
        return parent::getScoreNeto();
    }

    public function setScorePosicionante($scorePosicionante)
    {
        $this->__load();
        return parent::setScorePosicionante($scorePosicionante);
    }

    public function getScorePosicionante()
    {
        $this->__load();
        return parent::getScorePosicionante();
    }

    public function setPosicion($posicion)
    {
        $this->__load();
        return parent::setPosicion($posicion);
    }

    public function getPosicion()
    {
        $this->__load();
        return parent::getPosicion();
    }

    public function setPuntaje($puntaje)
    {
        $this->__load();
        return parent::setPuntaje($puntaje);
    }

    public function getPuntaje()
    {
        $this->__load();
        return parent::getPuntaje();
    }

    public function setPuntosPorPosicion($puntosPorPosicion)
    {
        $this->__load();
        return parent::setPuntosPorPosicion($puntosPorPosicion);
    }

    public function getPuntosPorPosicion()
    {
        $this->__load();
        return parent::getPuntosPorPosicion();
    }

    public function setPuntosPorParticipacion($puntosPorParticipacion)
    {
        $this->__load();
        return parent::setPuntosPorParticipacion($puntosPorParticipacion);
    }

    public function getPuntosPorParticipacion()
    {
        $this->__load();
        return parent::getPuntosPorParticipacion();
    }

    public function setPuntosPorGrossIndividuales($puntosPorGrossIndividuales)
    {
        $this->__load();
        return parent::setPuntosPorGrossIndividuales($puntosPorGrossIndividuales);
    }

    public function getPuntosPorGrossIndividuales()
    {
        $this->__load();
        return parent::getPuntosPorGrossIndividuales();
    }

    public function setPuntajeTotal($puntajeTotal)
    {
        $this->__load();
        return parent::setPuntajeTotal($puntajeTotal);
    }

    public function getPuntajeTotal()
    {
        $this->__load();
        return parent::getPuntajeTotal();
    }

    public function setIdTemporadaClub($idTemporadaClub)
    {
        $this->__load();
        return parent::setIdTemporadaClub($idTemporadaClub);
    }

    public function getIdTemporadaClub()
    {
        $this->__load();
        return parent::getIdTemporadaClub();
    }

    public function setTemporadaClub(\Par3\GolfEnLaNubeBundle\Entity\TemporadaClub $temporadaClub = NULL)
    {
        $this->__load();
        return parent::setTemporadaClub($temporadaClub);
    }

    public function getTemporadaClub()
    {
        $this->__load();
        return parent::getTemporadaClub();
    }

    public function setScoreDesempate($scoreDesempate)
    {
        $this->__load();
        return parent::setScoreDesempate($scoreDesempate);
    }

    public function getScoreDesempate()
    {
        $this->__load();
        return parent::getScoreDesempate();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'id_club', 'id_temporada_club', 'id_torneo_fecha', 'nombre', 'score_posicionante', 'score_desempate', 'score_gross', 'score_neto', 'posicion', 'puntos_por_posicion', 'puntos_por_participacion', 'puntos_por_gross_individuales', 'puntaje_total', 'torneo_fecha_jugadores', 'club', 'temporada_club', 'torneo_fecha');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}